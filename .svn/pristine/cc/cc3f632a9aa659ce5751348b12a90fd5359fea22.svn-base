package cn.edu.tsinghua.thss.tsmart.modeling.bip.parts;

import java.beans.PropertyChangeEvent;
import java.util.List;

import org.eclipse.draw2d.ChopboxAnchor;
import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.ConnectionAnchor;
import org.eclipse.draw2d.Ellipse;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.ConnectionEditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.NodeEditPart;
import org.eclipse.gef.Request;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

import cn.edu.tsinghua.thss.tsmart.modeling.bip.models.BaseModel;
import cn.edu.tsinghua.thss.tsmart.modeling.bip.models.CompoundTypeModel;
import cn.edu.tsinghua.thss.tsmart.modeling.bip.models.ConnectorPortModel;
import cn.edu.tsinghua.thss.tsmart.modeling.bip.models.ConnectorTypeModel;
import cn.edu.tsinghua.thss.tsmart.modeling.bip.policies.ConnectorPortEditPolicy;
import cn.edu.tsinghua.thss.tsmart.modeling.bip.policies.DeleteConnectorEditPolicy;
import cn.edu.tsinghua.thss.tsmart.modeling.ui.dialog.EditConnectorDialog;


public class ConnectorTypeEditPart extends BaseEditableEditPart implements NodeEditPart {
    IFigure figure;
    Label   tooltip;

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (BaseModel.CONSTRAINT.equals(evt.getPropertyName())) {
            getParent().refresh();
            refreshVisuals();
        } else if (ConnectorTypeModel.SOURCE_CONNECTION.equals(evt.getPropertyName())) {
            refreshSourceConnections();
        } else {
            refreshVisuals();
        }
    }

    @Override
    protected List<ConnectorPortModel> getModelSourceConnections() {
        return ((ConnectorTypeModel) getModel()).getSourceConnections();
    }

    @Override
    protected IFigure createFigure() {
        figure = new Ellipse();
        figure.setForegroundColor(ColorConstants.black);
        ConnectorTypeModel model = (ConnectorTypeModel) getModel();
        tooltip = new Label();
        tooltip.setText(model.getName());
        figure.setToolTip(tooltip);
        return figure;
    }

    @Override
    protected void refreshVisuals() {
        ConnectorTypeModel model = (ConnectorTypeModel) getModel();
        Rectangle constraint = model.getPositionConstraint();
        ((BaseGraphicalEditPart) getParent()).setLayoutConstraint(this, getFigure(), constraint);
        tooltip.setText(model.getName());
    }

    @Override
    protected void createEditPolicies() {
        installEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ConnectorPortEditPolicy());
        installEditPolicy(EditPolicy.COMPONENT_ROLE, new DeleteConnectorEditPolicy());
    }

    @Override
    public ConnectionAnchor getSourceConnectionAnchor(ConnectionEditPart connection) {
        return new ChopboxAnchor(getFigure());
    }

    @Override
    public ConnectionAnchor getTargetConnectionAnchor(ConnectionEditPart connection) {
        return null;
    }

    @Override
    public ConnectionAnchor getSourceConnectionAnchor(Request request) {
        return new ChopboxAnchor(getFigure());
    }

    @Override
    public ConnectionAnchor getTargetConnectionAnchor(Request request) {
        return null;
    }

    @Override
    protected void performDoubleClick() {
        ConnectorTypeModel child = (ConnectorTypeModel) getModel();
        CompoundTypeModel parent = child.getParent();
        Shell shell = Display.getDefault().getActiveShell();
        if (shell != null) {
            EditConnectorDialog dialog = new EditConnectorDialog(shell, child, parent);
            dialog.setBlockOnOpen(true);
            dialog.open();

        }
    }
}
