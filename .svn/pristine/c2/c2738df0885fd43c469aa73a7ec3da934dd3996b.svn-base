package cn.edu.tsinghua.thss.tsmart.modeling.bip.models;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.views.properties.ComboBoxPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertyDescriptor;
import org.eclipse.ui.views.properties.TextPropertyDescriptor;

/**
 * @author Huangcd (huangcd.thu@gmail.com)
 * @time 2011-7-9 上午11:22:38
 * @project CereusBip
 * @package cereusbip.models
 * @class PortModel.java
 */
public class PortModel extends ListDataModel<PortAreaModel> {
    private boolean              isExport;
    private List<DataModel>      datas;
    private ContainerModel       owner;
    private BulletModel          shape;
    private final static Pattern wordsPattern = Pattern.compile("((\\w+),\\s*)*(\\w+)");
    public final static String   DATAS        = "PortDatas";
    public final static String   EXPORT       = "PortExport";

    public PortModel() {
        datas = new ArrayList<DataModel>();
    }

    public PortModel(String pName) {
        datas = new ArrayList<DataModel>();
        setName(pName);
    }

    @Override
    public IPropertyDescriptor[] getPropertyDescriptors() {
        return new IPropertyDescriptor[] {
                        new TextPropertyDescriptor(NAME, "name"),
                        new TextPropertyDescriptor(DATAS, "datas"),
                        new ComboBoxPropertyDescriptor(EXPORT, "is export port", new String[] {
                                        "false", "true"}),};
    }

    private boolean validateAndSetDatas(String dataText) {
        if (owner == null) {
            System.err.println("A PortModel Without container: " + this);
            return false;
        }
        Matcher matcher = wordsPattern.matcher(dataText);
        if (matcher.matches()) {
            List<DataModel> tmp = new ArrayList<DataModel>();
            HashMap<String, DataModel> map = new HashMap<String, DataModel>();
            if (owner instanceof AtomicTypeModel) {
                List<DataModel> ownerDatas =
                                ((AtomicTypeModel) owner).getDataAreaModel().getChildren();
                for (DataModel model : ownerDatas) {
                    map.put(model.getName(), model);
                }
            }
            String[] words = dataText.split(",");
            for (String word : words) {
                word = word.trim();
                if (map.containsKey(word)) {
                    if (tmp.contains(map.get(word))) {
                        MessageBox box =
                                        new MessageBox(Display.getCurrent().getActiveShell(),
                                                        SWT.OK | SWT.ICON_ERROR
                                                                        | SWT.APPLICATION_MODAL);
                        box.setText("Error");
                        box.setMessage(String.format("Duplicate data '%s' for '%s'", word,
                                        getOwner().getName()));
                        box.open();
                        // TODO 询问是否要添加一个变量
                        return false;
                    }
                    tmp.add(map.get(word));
                } else {
                    Shell shell = Display.getCurrent().getActiveShell();
                    if (shell == null) return false;
                    MessageBox box =
                                    new MessageBox(shell, SWT.OK | SWT.ICON_ERROR
                                                    | SWT.APPLICATION_MODAL);
                    box.setText("Error");
                    box.setMessage(String.format("Unknown data '%s' in Atomic '%s'", word,
                                    getOwner().getName()));
                    box.open();
                    return false;
                }
            }
            setDatas(tmp);
            return true;
        }
        return false;
    }

    private String datasAsString() {
        StringBuilder buffer = new StringBuilder();
        for (DataModel data : datas) {
            buffer.append(data.getName()).append(", ");
        }
        if (datas.isEmpty()) return "";
        return buffer.substring(0, buffer.length() - 2);
    }

    public Object getPropertyValue(Object id) {
        if (NAME.equals(id))
            return getName();
        else if (DATAS.equals(id))
            return datasAsString();
        else if (EXPORT.equals(id)) {
            if (isExport)
                return 1;
            else
                return 0;
        }
        return null;
    }

    public boolean isPropertySet(Object id) {
        return NAME.equals(id) || DATAS.equals(id) || EXPORT.equals(id);
    }

    public void resetPropertyValue(Object id) {}

    public void setPropertyValue(Object id, Object value) {
        if (NAME.equals(id)) {
            setName((String) value);
        } else if (DATAS.equals(id)) {
            validateAndSetDatas((String) value);
        } else if (EXPORT.equals(id)) {
            int index = (Integer) value;
            if (index == 0) {
                setExport(false);
            } else if (index == 1) {
                setExport(true);
            } else {
                System.err.printf("Unknown index %d in PortModel\n", index);
            }
        }
    }

    public boolean nameExistsInParent(String name) {
        if (getParent() == null) {
            return true;
        }
        for (PortModel child : getParent().getChildren()) {
            if (!child.equals(this) && child.getName().equals(name)) {
                return true;
            }
        }
        return false;
    }

    public void setName(String name) {
        if (nameExistsInParent(name)) {
            return;
        }
        super.setName(name);
        firePropertyChange(NAME, null, name);
        if (getParent() != null) getParent().childUpdated(this);
        notifyRegisterObjects();
    }

    public List<DataModel> getDatas() {
        return datas;
    }

    public void addData(DataModel data) {
        data.register(this);
        this.datas.add(data);
        firePropertyChange(DATAS, null, data);
        if (getParent() != null) getParent().childUpdated(this);
        notifyRegisterObjects();
    }

    public void setDatas(List<DataModel> datas) {
        for (DataModel data : this.datas) {
            data.unRegister(this);
        }
        for (DataModel data : datas) {
            data.register(this);
        }
        this.datas = datas;
        firePropertyChange(DATAS, null, datas);
        if (getParent() != null) getParent().childUpdated(this);
        notifyRegisterObjects();
    }

    public ContainerModel getOwner() {
        return owner;
    }

    public void setOwner(ContainerModel owner) {
        this.owner = owner;
    }

    @Override
    public String toString() {
        return String.format("%s%s(%s)", (isExport ? "export " : ""), getName(), datasAsString());
    }

    public boolean isExport() {
        return isExport;
    }

    public void setExport(boolean isExport) {
        if (isExport != this.isExport) {
            if (isExport) {
                if (shape == null) {
                    shape = new BulletModel(owner, this);
                    int diameter = 2 * BULLET_RADIUS;
                    shape.setPositionConstraint(new Rectangle(0, 40, diameter, diameter));
                    this.register(shape);
                }
                owner.addChild(shape);
            } else {
                owner.removeChild(shape);
            }
            this.isExport = isExport;
            firePropertyChange(EXPORT, null, isExport);
            if (getParent() != null) getParent().childUpdated(this);
            notifyRegisterObjects();
        }
    }

    // 从字符串中解析出port，guard，action
    public boolean setProperties(String s) {
        String pattern = " (.*) (.*) = (.*);";
        Pattern transitionPattern = Pattern.compile(pattern);
        Matcher m = transitionPattern.matcher(s);
        if (m.matches()) {
            System.out.println(this.toString());
            return true;
        }
        return false;
    }

    public BulletModel getShape() {
        return shape;
    }

    public String getPortTypeID() {
        return PortTypeModel.registerPortType(this);
    }

    @Override
    public Element toXML() {
        Element element = DocumentHelper.createElement("port");
        element.addAttribute("name", getName());
        element.addAttribute("id", getId());
        element.addAttribute("export", isExport ? "yes" : "no");
        element.addAttribute("portTypeID", PortTypeModel.registerPortType(this));
        if (getShape() != null) {
            element.addAttribute("x", "" + getShape().getPositionConstraint().x());
            element.addAttribute("y", "" + getShape().getPositionConstraint().y());
        }
        for (DataModel data : getDatas()) {
            Element variable = DocumentHelper.createElement("variable");
            variable.addAttribute("name", data.getName());
            element.add(variable);
        }
        return element;
    }

    @Override
    public String toBIP() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public BaseModel fromXML() {
        // TODO Auto-generated method stub
        return null;
    }
}
