package cn.edu.tsinghua.thss.tsmart.modeling.bip.models;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.ui.views.properties.ComboBoxPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertyDescriptor;
import org.eclipse.ui.views.properties.TextPropertyDescriptor;

import cn.edu.tsinghua.thss.tsmart.modeling.util.MessageBoxUtil;


/**
 * 
 * @author: huangcd (huangcd.thu@gmail.com)
 * @time: 2011-6-26 下午01:49:30
 * @project: CereusBip
 * @package: cereusbip.models
 * @class: PlaceConnectionModel.java
 * 
 */
public class TransitionModel extends BaseConnectionModel {
    private AtomicTypeModel             parent;
    private PortModel                   port;
    private PlaceModel                  source;
    private PlaceModel                  target;
    private String                      guard  = "true";
    private String                      action = "";
    private HashMap<Integer, PortModel> portIdxMap;

    public final static String          GUARD  = "TransitionGuard";
    public final static String          ACTION = "TransitionAction";
    public final static String          SOURCE = "TransitionSource";
    public final static String          TARGET = "TransitionTarget";
    public final static String          PORT   = "TransitionPort";
    public final static String          PARENT = "TransitionParent";

    public void attachSource() {
        if (!source.getSourceConnections().contains(this)) source.addSourceConnection(this);
    }

    public void attachTarget() {
        if (!target.getTargetConnections().contains(this)) target.addTargetConnection(this);
    }

    public void detachSource() {
        source.removeSourceConnection(this);
    }

    public void detachTarget() {
        target.removeTargetConnection(this);
    }

    public PlaceModel getSource() {
        return source;
    }

    public void setSource(PlaceModel source) {
        this.source = source;
        firePropertyChange(SOURCE, null, source);
    }

    public PlaceModel getTarget() {
        return target;
    }

    public void setTarget(PlaceModel target) {
        this.target = target;
        firePropertyChange(TARGET, null, target);
    }

    @Override
    public Object getPropertyValue(Object id) {
        if (PARENT.equals(id))
            return parent;
        else if (PORT.equals(id)) {
            for (Map.Entry<Integer, PortModel> entry : portIdxMap.entrySet()) {
                if (entry.getValue().equals(port)) return entry.getKey();
            }
            return portIdxMap.size();
        } else if (GUARD.equals(id))
            return guard;
        else if (ACTION.equals(id))
            return action;
        else if (SOURCE.equals(id))
            return source;
        else if (TARGET.equals(id)) return target;
        return null;
    }

    @Override
    public boolean isPropertySet(Object id) {
        if (PARENT.equals(id) || PORT.equals(id) || SOURCE.equals(id) || TARGET.equals(id)
                        || GUARD.equals(id) || ACTION.equals(id)) return true;
        return false;
    }

    @Override
    public void resetPropertyValue(Object id) {}

    @Override
    public void setPropertyValue(Object id, Object value) {
        if (PARENT.equals(id))
            setParent((AtomicTypeModel) value);
        else if (PORT.equals(id)) {
            if (portIdxMap.containsKey(value))
                setPort(portIdxMap.get(value));
            else
                setPort(null);
        } else if (GUARD.equals(id))
            setGuard((String) value);
        else if (ACTION.equals(id))
            setAction((String) value);
        else if (SOURCE.equals(id))
            setSource((PlaceModel) value);
        else if (TARGET.equals(id)) setTarget((PlaceModel) value);
    }

    @Override
    public IPropertyDescriptor[] getPropertyDescriptors() {
        portIdxMap = new HashMap<Integer, PortModel>();
        List<PortModel> ports = getSource().getParent().getPortAreaModel().getChildren();
        int length = ports.size();
        String[] values = new String[length + 1];
        for (int i = 0; i < length; i++) {
            portIdxMap.put(i, ports.get(i));
            values[i] = ports.get(i).getName();
        }
        values[length] = "NOT SET YET";
        return new IPropertyDescriptor[] {new TextPropertyDescriptor(GUARD, "guard"),
                        new TextPropertyDescriptor(ACTION, "action"),
                        new ComboBoxPropertyDescriptor(PORT, "port", values),};
    }

    public AtomicTypeModel getParent() {
        return parent;
    }

    public void setParent(AtomicTypeModel parent) {
        this.parent = parent;
        firePropertyChange(PARENT, null, parent);
    }

    public PortModel getPort() {
        return port;
    }

    public void setPort(PortModel port) {
        if (this.port != null) {
            this.port.unRegister(this);
        }
        if (port != null) {
            port.register(this);
        }
        this.port = port;
        firePropertyChange(PORT, null, port);
    }

    public String getGuard() {
        return guard;
    }

    public void setGuard(String guard) {
        this.guard = guard;
        firePropertyChange(GUARD, null, guard);
    }

    public String getAction() {
        return action;
    }

    public void setAction(String action) {
        this.action = action;
        firePropertyChange(ACTION, null, action);
    }

    @Override
    public String toString() {
        return "g:{" + guard + "} {" + (port == null ? "NOT SET YET" : port.getName()) + "} f:{"
                        + action + "}";
    }

    // 从字符串中解析出port，guard，action
    public boolean setProperties(String s) {
        String pattern = "g:\\{(.*)\\} \\{(.*)\\} f:\\{(.*)\\}";
        Pattern transitionPattern = Pattern.compile(pattern);
        Matcher m = transitionPattern.matcher(s);
        if (m.matches()) {
            // validate and set ports
            String portName = m.group(2);
            boolean hasPort = false;
            for (PortModel model : getSource().getParent().getPortAreaModel().getChildren()) {
                if (model.getName().equals(portName)) {
                    this.setPort(model);
                    hasPort = true;
                    break;
                }
            }
            if (!hasPort) {
                MessageBoxUtil.ShowErrorMessage("Error", String.format(
                                "The Atomic '%s' doesn't have a port named '%s'", getSource()
                                                .getParent().getName()));
                return false;
            }
            this.setGuard(m.group(1));
            this.setAction(m.group(3));
            return true;
        }
        return false;
    }

    @Override
    public Element toXML() {
        Element element = DocumentHelper.createElement("transition");
        Element portName = element.addElement("portName");
        portName.addAttribute("name", port.getName());
        element.addElement("fromPlaces").addElement("placeRef")
                        .addAttribute("placeID", source.getId());
        element.addElement("toPlaces").addElement("placeRef")
                        .addAttribute("placeID", target.getId());
        if (guard != null && !guard.isEmpty() && !guard.equals("true")) {
            element.addElement("guard").addText(guard);
        }
        if (action != null && !action.isEmpty()) {
            element.addElement("action").addText(action);
        }
        Element bendPoints = element.addElement("bendPoints");
        for (Point point : getBendPoints()) {
            Element bendPoint = bendPoints.addElement("bendPoint");
            bendPoint.addAttribute("x", "" + point.x());
            bendPoint.addAttribute("y", "" + point.y());
        }
        return element;
    }

    @Override
    public String toBIP() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public BaseModel fromXML() {
        // TODO Auto-generated method stub
        return null;
    }
}
