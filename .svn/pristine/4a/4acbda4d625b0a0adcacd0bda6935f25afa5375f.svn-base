package cn.edu.tsinghua.thss.tsmart.modeling.bip.models;

import org.dom4j.Element;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.ui.views.properties.IPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertySource;

import cn.edu.tsinghua.thss.tsmart.modeling.util.UpdateNotifier;
import cn.edu.tsinghua.thss.tsmart.modeling.util.UpdateReceiver;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public abstract class BaseModel
                implements
                    IPropertySource,
                    UpdateNotifier,
                    UpdateReceiver,
                    Serializable {
    private PropertyChangeSupport listeners       = new PropertyChangeSupport(this);
    private List<UpdateReceiver>  registerObjects = new ArrayList<UpdateReceiver>();
    private Rectangle             positionConstraint;
    public static final String    REFRESH         = "ForceToRefresh";
    public final static int       BULLET_RADIUS   = 8;
    public final static String    CONSTRAINT      = "ModelConstraint";
    public final static String    NAME            = "ModelName";
    private String                id              = UUID.randomUUID().toString();
    private String                name            = "";

    public String getName() {
        if (name == null) return "";
        return name;
    }

    public void setName(String name) {
        this.name = name;
        firePropertyChange(NAME, null, name);
    }

    public String getId() {
        return id;
    }

    /**
     * Update position constraint and notify EditPart
     * <p/>
     * Width and height are not allowed to change
     * 
     * @param rect
     */
    public void setPositionConstraint(Rectangle rect) {
        this.positionConstraint = rect;
        firePropertyChange(CONSTRAINT, null, rect);
    }

    public abstract Element toXML();

    public abstract String toBIP();

    public abstract BaseModel fromXML();

    public Rectangle getPositionConstraint() {
        return positionConstraint;
    }

    @Override
    public void updated() {
        firePropertyChange(REFRESH, null, null);
    }

    @Override
    public List<UpdateReceiver> getRegisterObjects() {
        return registerObjects;
    }

    @Override
    public void register(UpdateReceiver obj) {
        if (obj != null) registerObjects.add(obj);
    }

    @Override
    public void unRegister(UpdateReceiver obj) {
        if (obj != null) registerObjects.remove(obj);
    }

    @Override
    public void notifyRegisterObjects() {
        for (UpdateReceiver receiver : getRegisterObjects()) {
            receiver.updated();
        }
    }

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        listeners.addPropertyChangeListener(listener);
    }

    public void firePropertyChange(String propertyName, Object oldValue, Object newValue) {
        listeners.firePropertyChange(propertyName, oldValue, newValue);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        listeners.removePropertyChangeListener(listener);
    }

    @Override
    public IPropertyDescriptor[] getPropertyDescriptors() {
        return new IPropertyDescriptor[0];
    }

    @Override
    public Object getEditableValue() {
        return this;// 返回模型本身作为可编辑的属性值
    }
}
