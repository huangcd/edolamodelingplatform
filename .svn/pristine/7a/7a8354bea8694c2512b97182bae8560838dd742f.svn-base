package cn.edu.tsinghua.thss.tsmart.modeling.bip.parts;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.draw2d.AbsoluteBendpoint;
import org.eclipse.draw2d.BendpointConnectionRouter;
import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.MouseEvent;
import org.eclipse.draw2d.MouseListener;
import org.eclipse.draw2d.MouseMotionListener;
import org.eclipse.draw2d.PolygonDecoration;
import org.eclipse.draw2d.PolylineConnection;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.Request;
import org.eclipse.gef.RequestConstants;
import org.eclipse.gef.editparts.AbstractConnectionEditPart;
import org.eclipse.jface.viewers.TextCellEditor;

import cn.edu.tsinghua.thss.tsmart.modeling.bip.models.BaseConnectionModel;
import cn.edu.tsinghua.thss.tsmart.modeling.bip.models.BaseModel;
import cn.edu.tsinghua.thss.tsmart.modeling.bip.policies.ConnectorBendPointEditPolicy;
import cn.edu.tsinghua.thss.tsmart.modeling.bip.policies.CustomDirectEditPolicy;


public abstract class BaseConnectionEditPart extends AbstractConnectionEditPart
                implements
                    PropertyChangeListener {
    protected Label                   label;
    int                               dx, dy, anchorX, anchorY; // 跟踪鼠标位置
    protected CustomDirectEditManager directManager = null;    // 编辑文本

    protected IFigure createFigure() {
        final PolylineConnection connection = new PolylineConnection();
        connection.setConnectionRouter(new BendpointConnectionRouter());
        connection.setTargetDecoration(new PolygonDecoration());

        label = new Label(getModel().toString());// 添加文字
        label.setForegroundColor(ColorConstants.blue);
        label.setOpaque(false);
        connection.add(label, new MidpointOffsetLocator(connection, 0));

        // 给label添加鼠标响应事件
        label.addMouseListener(new MouseListener() {
            public void mousePressed(MouseEvent me) {
                anchorX = me.x;
                anchorY = me.y;
                me.consume();
            }

            public void mouseReleased(MouseEvent me) {
                me.consume();
            }

            @Override
            public void mouseDoubleClicked(MouseEvent event) {
                // 可将双击事件写这儿？
                // performDirectEdit();
            }
        });
        label.addMouseMotionListener(new MouseMotionListener() {
            // 实现拖动label的效果
            public void mouseDragged(MouseEvent me) {
                dx += me.x - anchorX;
                dy += me.y - anchorY;
                anchorX = me.x;
                anchorY = me.y;
                Object constraint = connection.getLayoutManager().getConstraint(label);
                if (constraint instanceof MidpointOffsetLocator) {
                    ((MidpointOffsetLocator) constraint).setOffset(new Point(dx, dy));
                    label.revalidate();
                }
                me.consume();
            }

            @Override
            public void mouseEntered(MouseEvent event) {}

            @Override
            public void mouseExited(MouseEvent event) {}

            @Override
            public void mouseHover(MouseEvent event) {}

            @Override
            public void mouseMoved(MouseEvent event) {}
        });
        return connection;
    }

    @Override
    public void performRequest(Request request) {
        if (request.getType().equals(RequestConstants.REQ_DIRECT_EDIT)) {
            performDirectEdit();
        } else if (request.getType().equals(RequestConstants.REQ_OPEN)) {
            performDoubleClicked();
        } else {
            super.performRequest(request);
        }
    }

    // 直接编辑
    private void performDirectEdit() {
        if (directManager == null) {
            // 如果还没有 directManager，则创建一个：类型是 Text，位置由图形决定
            directManager =
                            new CustomDirectEditManager(this, TextCellEditor.class,
                                            new CustomCellEditorLocator(this.label));
        }
        directManager.show(); // 显示这个 directManager
    }

    @Override
    public void activate() {
        super.activate();
        ((BaseConnectionModel) getModel()).addPropertyChangeListener(this);
    }

    @Override
    public void deactivate() {
        super.deactivate();
        ((BaseConnectionModel) getModel()).removePropertyChangeListener(this);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (BaseConnectionModel.BEND_POINTS.equals(evt.getPropertyName())) {
            refreshVisuals();
        } else if (BaseModel.REFRESH.equals(evt.getPropertyName())) {
            label.setText(getModel().toString());
            refreshVisuals();
        }
    }

    @Override
    protected void createEditPolicies() {
        installEditPolicy(EditPolicy.CONNECTION_BENDPOINTS_ROLE, new ConnectorBendPointEditPolicy());// 拐点
        installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new CustomDirectEditPolicy()); // 直接编辑
    }

    protected abstract void performDoubleClicked();

    /**
     * 画折线以及标签。
     */
    protected void refreshBendPoints() {
        List<Point> points = ((BaseConnectionModel) getModel()).getBendPoints();
        List<AbsoluteBendpoint> bendPoints = new ArrayList<AbsoluteBendpoint>();
        for (Point point : points) {
            bendPoints.add(new AbsoluteBendpoint(point));
        }
        getConnectionFigure().setRoutingConstraint(bendPoints);
        getConnectionFigure().remove(label);
        getConnectionFigure().add(label,
                        new MidpointOffsetLocator(getConnectionFigure(), bendPoints.size() / 2));
    }

    @Override
    protected void refreshVisuals() {
        refreshBendPoints();
        super.refreshVisuals();
    }

}
