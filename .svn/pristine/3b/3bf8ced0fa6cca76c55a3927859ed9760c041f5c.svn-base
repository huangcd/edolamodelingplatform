package cn.edu.tsinghua.thss.tsmart.modeling.bip.models;

import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.eclipse.draw2d.geometry.Rectangle;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class CompoundTypeModel extends ContainerModel {
    public final static String        PARENT = "CompoundParent";
    private CompoundPriorityAreaModel priorityAreaModel;
    private BaseModel                 parent;

    public CompoundTypeModel(String name) {
        setName(name);
        priorityAreaModel = new CompoundPriorityAreaModel();
        priorityAreaModel.setPositionConstraint(new Rectangle(165, 35, 60, 80));
        priorityAreaModel.setParent(this);
        addChild(priorityAreaModel);
    }

    public List<ConnectorTypeModel> getConnectors() {
        List<ConnectorTypeModel> connectors = new ArrayList<ConnectorTypeModel>();
        for (BaseModel child : getChildren()) {
            if (child instanceof ConnectorTypeModel) {
                connectors.add((ConnectorTypeModel) child);
            }
        }
        return connectors;
    }

    public BaseModel getParent() {
        return parent;
    }

    @Override
    public Object getPropertyValue(Object id) {
        return null;
    }

    @Override
    public boolean isPropertySet(Object id) {
        return false;
    }

    @Override
    public void resetPropertyValue(Object id) {}

    public void setParent(BaseModel parent) {
        this.parent = parent;
        firePropertyChange(PARENT, null, null);
    }

    @Override
    public void setPropertyValue(Object id, Object value) {}

    @Override
    public Element toXML() {
        // TODO 这个实现方法不是太好，下一部考虑在确保name不重复的前提下直接用name作为ID，取消name属性
        HashMap<BaseModel, String> uniqueID = new HashMap<BaseModel, String>();
        int componentCounter = 1;
        int connectorCounter = 1;
        for (BaseModel model : getChildren()) {
            if (model instanceof AtomicTypeModel || model instanceof CompoundTypeModel) {
                uniqueID.put(model, "component" + (componentCounter++));
            } else if (model instanceof ConnectorTypeModel) {
                uniqueID.put(model, "connector" + (connectorCounter++));
            }
        }
        Element element = DocumentHelper.createElement("compoundType");
        element.addAttribute("id", getId());
        element.addAttribute("name", getName());

        Element components = element.addElement("components");
        Element connectors = element.addElement("connectors");
        Element exportPorts = element.addElement("exportPorts");
        for (BaseModel model : getChildren()) {
            if (model instanceof AtomicTypeModel) {
                AtomicTypeModel atomicType = (AtomicTypeModel) model;
                Element e = components.addElement("component");
                e.addAttribute("componentTypeID", atomicType.getId());
                e.addAttribute("name", atomicType.getName());
                e.addAttribute("id", uniqueID.get(model));
                Rectangle rect = atomicType.getPositionConstraint();
                e.addAttribute("x", Integer.toString(rect.x()));
                e.addAttribute("y", Integer.toString(rect.y()));
                e.addAttribute("width", Integer.toString(rect.width()));
                e.addAttribute("height", Integer.toString(rect.height()));
            } else if (model instanceof CompoundTypeModel) {
                CompoundTypeModel compoundType = (CompoundTypeModel) model;
                Element e = components.addElement("component");
                e.addAttribute("componentTypeID", compoundType.getId());
                e.addAttribute("name", compoundType.getId());
                e.addAttribute("id", uniqueID.get(model));
                Rectangle rect = compoundType.getPositionConstraint();
                e.addAttribute("x", Integer.toString(rect.x()));
                e.addAttribute("y", Integer.toString(rect.y()));
                e.addAttribute("width", Integer.toString(rect.width()));
                e.addAttribute("height", Integer.toString(rect.height()));
            } else if (model instanceof ConnectorTypeModel) {
                ConnectorTypeModel connector = (ConnectorTypeModel) model;
                Element e = connectors.addElement("connector");
                e.addAttribute("id", uniqueID.get(model));
                e.addAttribute("name", "_" + connector.getName());
                e.addAttribute("connectorTypeID", connector.getId());
                e.addAttribute("x", Integer.toString(connector.getPositionConstraint().x()));
                e.addAttribute("y", Integer.toString(connector.getPositionConstraint().y()));
                for (ConnectorPortModel connectorPort : connector.getSourceConnections()) {
                    Element interactionPort = e.addElement("interactionPort");
                    // Bullet 对应的 Component在这个Compound里面的ID
                    interactionPort.addAttribute("componentID",
                                    uniqueID.get(connectorPort.getTarget().getParent()));
                    // Bullet 对应的 Port 的ID（原始ID）
                    interactionPort.addAttribute("portID", connectorPort.getTarget().getParent()
                                    .getId());
                    // TODO 增加连线信息
                }
                if (connector.isExport()) {
                    Element exportPort = exportPorts.addElement("exportPort");
                    exportPort.addAttribute("connectorID", uniqueID.get(model));
                    // export port aaa is _aaa;
                    exportPort.addAttribute("name", connector.getName());
                    Rectangle rect = connector.getShape().getPositionConstraint();
                    exportPort.addAttribute("x", Integer.toString(rect.x()));
                    exportPort.addAttribute("y", Integer.toString(rect.y()));
                }
            }
        }
        element.add(priorityAreaModel.toXML());
        return element;
    }

    @Override
    public String toBIP() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public BaseModel fromXML() {
        // TODO Auto-generated method stub
        return null;
    }
}
